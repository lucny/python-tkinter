import tkinter as tk
from tkinter import ttk, messagebox
import random

"""
V√Ωukov√° aplikace: Procviƒçov√°n√≠ z√°klad≈Ø Pythonu s Tkinterem
---------------------------------------------------------
T√©mata: funkce, cykly, podm√≠nky, pr√°ce s GUI prvky (Entry, Button, Listbox, Text, Canvas)

Struktura:
- Vlevo je seznam √∫loh (vzestupn√° n√°roƒçnost)
- Vpravo se zobrazuje obsah aktu√°lnƒõ vybran√© √∫lohy

Ka≈æd√° √∫loha m√°:
- Kr√°tk√© zad√°n√≠
- Jednoduch√© rozhran√≠ pro vstup/v√Ωstup
- Vzorov√© ≈ôe≈°en√≠, kter√© vyu≈æ√≠v√° funkce/cykly/podm√≠nky
- (Volitelnƒõ) n√°pady na roz≈°√≠≈ôen√≠

Pedagogick√° pozn√°mka: √ölohy jsou napsan√© "ƒçistƒõ", s koment√°≈ôi. M≈Ø≈æete je ≈æ√°k≈Øm
postupnƒõ odkr√Ωvat: nap≈ô. nejprve smazat ƒç√°st ≈ôe≈°en√≠ a nechat je doplnit.
"""

# --------------------------- Pomocn√© vƒõci ------------------------------------

def clear_frame(frame: tk.Widget):
    """Zniƒç√≠ v≈°echny potomky ve frame ‚Äì pou≈æito p≈ôi p≈ôep√≠n√°n√≠ √∫loh."""
    for child in frame.winfo_children():
        child.destroy()

# --------------------------- √ölohy -------------------------------------------

# √öloha 1: Pozdrav funkc√≠ (funkce + podm√≠nka)
def build_task_1(parent: tk.Widget):
    frame = ttk.Frame(parent)

    ttk.Label(frame, text="√öloha 1 ‚Äì Pozdrav funkc√≠", font=("Segoe UI", 12, "bold")).pack(anchor="w", pady=(0, 6))
    ttk.Label(frame, text=(
        "Zadej sv√© jm√©no a stiskni tlaƒç√≠tko. Funkce greet rozhodne, jak√Ω pozdrav zobrazit.\n"
        "Procviƒç√≠≈°: definici funkce, podm√≠nky if/else."
    )).pack(anchor="w", pady=(0, 8))

    row = ttk.Frame(frame)
    row.pack(fill="x", pady=4)
    ttk.Label(row, text="Jm√©no:").pack(side="left")
    name_var = tk.StringVar()
    ttk.Entry(row, textvariable=name_var, width=24).pack(side="left", padx=6)

    output = tk.StringVar(value="ƒåek√°m na zad√°n√≠‚Ä¶")
    ttk.Label(frame, textvariable=output, foreground="#205b2b").pack(anchor="w", pady=6)

    def greet(name: str) -> str:
        # Funkce + podm√≠nka
        name = name.strip()
        if not name:
            return "Nejprve zadej jm√©no."
        # P≈ô√≠klad dal≈°√≠ podm√≠nky ‚Äì kdy≈æ jm√©no zaƒç√≠n√° na A
        if name[0].lower() == "a":
            return f"Ahoj, {name}! √Åƒçka maj√≠ p≈ôednost üòÑ"
        return f"Ahoj, {name}!"

    ttk.Button(frame, text="Pozdrav", command=lambda: output.set(greet(name_var.get()))).pack(anchor="w")

    return frame

# √öloha 2: Souƒçet 1..N (cyklus for + validace)
def build_task_2(parent: tk.Widget):
    frame = ttk.Frame(parent)
    ttk.Label(frame, text="√öloha 2 ‚Äì Souƒçet ƒç√≠sel 1..N", font=("Segoe UI", 12, "bold")).pack(anchor="w", pady=(0,6))
    ttk.Label(frame, text=(
        "Zadej N a spoƒç√≠tej souƒçet 1 + 2 + ‚Ä¶ + N pomoc√≠ cyklu for.\n"
        "Procviƒç√≠≈°: p≈ôevod vstupu na int, for, podm√≠nky pro validaci."
    )).pack(anchor="w", pady=(0,8))

    row = ttk.Frame(frame)
    row.pack(fill="x", pady=4)
    ttk.Label(row, text="N:").pack(side="left")
    n_var = tk.StringVar(value="10")
    ttk.Entry(row, textvariable=n_var, width=10).pack(side="left", padx=6)

    result = tk.StringVar(value="V√Ωsledek se zobraz√≠ zde‚Ä¶")
    ttk.Label(frame, textvariable=result, foreground="#205b2b").pack(anchor="w", pady=6)

    def sum_to_n(n: int) -> int:
        total = 0
        for i in range(1, n + 1):
            total += i
        return total

    def run():
        try:
            n = int(n_var.get())
            if n < 0:
                result.set("N mus√≠ b√Ωt nez√°porn√© cel√© ƒç√≠slo.")
                return
            result.set(f"Souƒçet 1..{n} = {sum_to_n(n)}")
        except ValueError:
            result.set("Zadej cel√© ƒç√≠slo.")

    ttk.Button(frame, text="Spoƒç√≠tej", command=run).pack(anchor="w")
    return frame

# √öloha 3: FizzBuzz (podm√≠nky + cyklus)
def build_task_3(parent: tk.Widget):
    frame = ttk.Frame(parent)
    ttk.Label(frame, text="√öloha 3 ‚Äì FizzBuzz", font=("Segoe UI", 12, "bold")).pack(anchor="w", pady=(0,6))
    ttk.Label(frame, text=(
        "Vypi≈° ƒç√≠sla 1..N, ale: n√°sobky 3 nahraƒè 'Fizz', n√°sobky 5 'Buzz', n√°sobky 15 'FizzBuzz'.\n"
        "Procviƒç√≠≈°: zbytek po dƒõlen√≠ (%), if/elif/else, for."
    )).pack(anchor="w", pady=(0,8))

    row = ttk.Frame(frame)
    row.pack(fill="x", pady=4)
    ttk.Label(row, text="N:").pack(side="left")
    n_var = tk.StringVar(value="30")
    ttk.Entry(row, textvariable=n_var, width=10).pack(side="left", padx=6)

    text = tk.Text(frame, width=48, height=10)
    text.pack(fill="both", expand=True, pady=6)

    def fizzbuzz(n: int) -> list[str]:
        out = []
        for i in range(1, n + 1):
            if i % 15 == 0:
                out.append("FizzBuzz")
            elif i % 3 == 0:
                out.append("Fizz")
            elif i % 5 == 0:
                out.append("Buzz")
            else:
                out.append(str(i))
        return out

    def run():
        text.delete("1.0", "end")
        try:
            n = int(n_var.get())
            if n <= 0:
                raise ValueError
            for line in fizzbuzz(n):
                text.insert("end", line + "\n")
        except ValueError:
            messagebox.showerror("Chyba", "Zadej kladn√© cel√© ƒç√≠slo N.")

    ttk.Button(frame, text="Vypi≈°", command=run).pack(anchor="w")
    return frame

# √öloha 4: N√°sobilkov√° tabulka (vno≈ôen√Ω cyklus)
def build_task_4(parent: tk.Widget):
    frame = ttk.Frame(parent)
    ttk.Label(frame, text="√öloha 4 ‚Äì N√°sobilkov√° tabulka", font=("Segoe UI", 12, "bold")).pack(anchor="w", pady=(0,6))
    ttk.Label(frame, text=(
        "Vygeneruj tabulku N√óM pomoc√≠ vno≈ôen√Ωch cykl≈Ø.\n"
        "Procviƒç√≠≈°: for v for, form√°tov√°n√≠ ≈ôetƒõzc≈Ø."
    )).pack(anchor="w", pady=(0,8))

    row = ttk.Frame(frame)
    row.pack(fill="x", pady=4)
    n_var = tk.StringVar(value="5")
    m_var = tk.StringVar(value="5")
    ttk.Label(row, text="N:").pack(side="left")
    ttk.Entry(row, textvariable=n_var, width=6).pack(side="left", padx=6)
    ttk.Label(row, text="M:").pack(side="left")
    ttk.Entry(row, textvariable=m_var, width=6).pack(side="left", padx=6)

    text = tk.Text(frame, width=48, height=10)
    text.pack(fill="both", expand=True, pady=6)

    def table(n: int, m: int) -> list[str]:
        lines = []
        for i in range(1, n + 1):
            row_vals = []
            for j in range(1, m + 1):
                row_vals.append(f"{i*j:>4}")
            lines.append("".join(row_vals))
        return lines

    def run():
        text.delete("1.0", "end")
        try:
            n = int(n_var.get()); m = int(m_var.get())
            if n <= 0 or m <= 0:
                raise ValueError
            for line in table(n, m):
                text.insert("end", line + "\n")
        except ValueError:
            messagebox.showerror("Chyba", "N a M mus√≠ b√Ωt kladn√° cel√° ƒç√≠sla.")

    ttk.Button(frame, text="Vygeneruj", command=run).pack(anchor="w")
    return frame

# √öloha 5: Minimum ze seznamu (cyklus + podm√≠nka)
def build_task_5(parent: tk.Widget):
    frame = ttk.Frame(parent)
    ttk.Label(frame, text="√öloha 5 ‚Äì Nejmen≈°√≠ ƒç√≠slo v seznamu", font=("Segoe UI", 12, "bold")).pack(anchor="w", pady=(0,6))
    ttk.Label(frame, text=(
        "Zadej ƒç√≠sla oddƒõlen√° ƒç√°rkou a zjisti minimum bez pou≈æit√≠ built-in min().\n"
        "Procviƒç√≠≈°: parsov√°n√≠ vstupu, for, podm√≠nƒõn√© p≈ôi≈ôazen√≠."
    )).pack(anchor="w", pady=(0,8))

    entry = ttk.Entry(frame, width=48)
    entry.insert(0, "10, 3, 7, -2, 5")
    entry.pack(anchor="w", pady=4)

    result = tk.StringVar(value="V√Ωsledek se zobraz√≠ zde‚Ä¶")
    ttk.Label(frame, textvariable=result, foreground="#205b2b").pack(anchor="w", pady=6)

    def parse_numbers(s: str) -> list[float]:
        nums = []
        for part in s.split(','):
            part = part.strip()
            if not part:
                continue
            nums.append(float(part))
        return nums

    def min_manual(nums: list[float]) -> float:
        if not nums:
            raise ValueError("Seznam je pr√°zdn√Ω")
        m = nums[0]
        for x in nums[1:]:
            if x < m:
                m = x
        return m

    def run():
        try:
            nums = parse_numbers(entry.get())
            result.set(f"Minimum = {min_manual(nums)}")
        except Exception as e:
            messagebox.showerror("Chyba", str(e))

    ttk.Button(frame, text="Zjisti minimum", command=run).pack(anchor="w")
    return frame

# √öloha 6: Prvoƒç√≠sla do N (cykly + podm√≠nky)
def build_task_6(parent: tk.Widget):
    frame = ttk.Frame(parent)
    ttk.Label(frame, text="√öloha 6 ‚Äì Prvoƒç√≠sla do N", font=("Segoe UI", 12, "bold")).pack(anchor="w", pady=(0,6))
    ttk.Label(frame, text=(
        "Vypi≈° v≈°echna prvoƒç√≠sla ‚â§ N jednoduchou metodou.\n"
        "Procviƒç√≠≈°: vno≈ôen√© cykly, continue/break, podm√≠nky."
    )).pack(anchor="w", pady=(0,8))

    row = ttk.Frame(frame)
    row.pack(fill="x", pady=4)
    ttk.Label(row, text="N:").pack(side="left")
    n_var = tk.StringVar(value="50")
    ttk.Entry(row, textvariable=n_var, width=10).pack(side="left", padx=6)

    text = tk.Text(frame, width=48, height=10)
    text.pack(fill="both", expand=True, pady=6)

    def is_prime(n: int) -> bool:
        if n < 2:
            return False
        # Kontrola dƒõlitel≈Ø do odmocniny n (efektivnƒõj≈°√≠ ne≈æ do n-1)
        i = 2
        while i * i <= n:
            if n % i == 0:
                return False
            i += 1
        return True

    def run():
        text.delete("1.0", "end")
        try:
            N = int(n_var.get())
            if N < 2:
                text.insert("end", "Pro N < 2 nejsou ≈æ√°dn√° prvoƒç√≠sla.\n")
                return
            primes = [str(k) for k in range(2, N + 1) if is_prime(k)]
            text.insert("end", ", ".join(primes) + "\n")
        except ValueError:
            messagebox.showerror("Chyba", "Zadej cel√© ƒç√≠slo N.")

    ttk.Button(frame, text="Vypi≈° prvoƒç√≠sla", command=run).pack(anchor="w")
    return frame

# √öloha 7: H√°dej ƒç√≠slo (podm√≠nky + cyklus na pokusy)
class GuessingGame:
    def __init__(self):
        self.secret = random.randint(1, 100)
        self.tries = 0

    def guess(self, x: int) -> str:
        self.tries += 1
        if x < self.secret:
            return "Vƒõt≈°√≠!"
        elif x > self.secret:
            return "Men≈°√≠!"
        else:
            return f"Spr√°vnƒõ üéâ Za {self.tries} pokus≈Ø. Nov√© ƒç√≠slo je vygenerov√°no."


def build_task_7(parent: tk.Widget):
    frame = ttk.Frame(parent)
    ttk.Label(frame, text="√öloha 7 ‚Äì H√°dej ƒç√≠slo 1..100", font=("Segoe UI", 12, "bold")).pack(anchor="w", pady=(0,6))
    ttk.Label(frame, text=(
        "Zkus uhodnout tajn√© ƒç√≠slo. Po ka≈æd√©m pokusu dostane≈° n√°povƒõdu.\n"
        "Procviƒç√≠≈°: podm√≠nky, poƒç√≠t√°n√≠ pokus≈Ø, pr√°ci se stavem."
    )).pack(anchor="w", pady=(0,8))

    game = GuessingGame()

    row = ttk.Frame(frame); row.pack(fill="x", pady=4)
    ttk.Label(row, text="Tip:").pack(side="left")
    tip_var = tk.StringVar()
    ttk.Entry(row, textvariable=tip_var, width=10).pack(side="left", padx=6)

    out = tk.StringVar(value="Zadej ƒç√≠slo a stiskni H√°dej‚Ä¶")
    ttk.Label(frame, textvariable=out, foreground="#205b2b").pack(anchor="w", pady=6)

    def run():
        try:
            x = int(tip_var.get())
            msg = game.guess(x)
            out.set(msg)
            if "Spr√°vnƒõ" in msg:
                game.__init__()  # rychl√Ω reset (nov√© tajn√© ƒç√≠slo)
        except ValueError:
            messagebox.showerror("Chyba", "Zadej cel√© ƒç√≠slo 1..100.")

    ttk.Button(frame, text="H√°dej", command=run).pack(anchor="w")
    return frame

# √öloha 8: Kreslen√≠ na Canvas (cyklus + podm√≠nka)
def build_task_8(parent: tk.Widget):
    frame = ttk.Frame(parent)
    ttk.Label(frame, text="√öloha 8 ‚Äì Kreslen√≠ ƒçtverc≈Ø na Canvas", font=("Segoe UI", 12, "bold")).pack(anchor="w", pady=(0,6))
    ttk.Label(frame, text=(
        "Vykresli N ƒçtverc≈Ø vedle sebe. Sud√© budou vyplnƒõn√©, lich√© pr√°zdn√©.\n"
        "Procviƒç√≠≈°: for, if, pr√°ci s Canvas."
    )).pack(anchor="w", pady=(0,8))

    row = ttk.Frame(frame); row.pack(fill="x", pady=4)
    ttk.Label(row, text="N:").pack(side="left")
    n_var = tk.StringVar(value="12")
    ttk.Entry(row, textvariable=n_var, width=8).pack(side="left", padx=6)

    c = tk.Canvas(frame, width=600, height=120, background="#ffffff")
    c.pack(fill="x", pady=8)

    def draw():
        c.delete("all")
        try:
            n = int(n_var.get())
            if n <= 0:
                raise ValueError
            size = 40
            margin = 6
            x = margin
            y = margin
            for i in range(1, n + 1):
                x2 = x + size
                y2 = y + size
                if i % 2 == 0:
                    # sud√© vyplnƒõn√©
                    c.create_rectangle(x, y, x2, y2, fill="#87CEFA", outline="#333333")
                else:
                    # lich√© pr√°zdn√©
                    c.create_rectangle(x, y, x2, y2, outline="#333333", width=2)
                x += size + margin
                if x2 + size + margin > c.winfo_width():
                    # nov√Ω ≈ô√°dek, kdy≈æ se nevejdeme
                    x = margin
                    y += size + margin
        except ValueError:
            messagebox.showerror("Chyba", "Zadej kladn√© cel√© ƒç√≠slo N.")

    ttk.Button(frame, text="Vykresli", command=draw).pack(anchor="w")
    return frame

# --------------------------- Aplikace ----------------------------------------

TASKS = [
    ("1. Pozdrav funkc√≠", build_task_1),
    ("2. Souƒçet 1..N", build_task_2),
    ("3. FizzBuzz", build_task_3),
    ("4. N√°sobilkov√° tabulka", build_task_4),
    ("5. Minimum v seznamu", build_task_5),
    ("6. Prvoƒç√≠sla do N", build_task_6),
    ("7. H√°dej ƒç√≠slo", build_task_7),
    ("8. Kreslen√≠ na Canvas", build_task_8),
]

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Procviƒçov√°n√≠ Pythonu ‚Äì Tkinter")
        self.geometry("980x560")
        self.minsize(820, 520)

        self.columnconfigure(1, weight=1)
        self.rowconfigure(0, weight=1)

        # Sidebar se seznamem √∫loh
        sidebar = ttk.Frame(self, padding=10)
        sidebar.grid(row=0, column=0, sticky="nsw")
        ttk.Label(sidebar, text="√ölohy", font=("Segoe UI", 12, "bold")).pack(anchor="w")

        self.listbox = tk.Listbox(sidebar, height=18, activestyle="dotbox")
        self.listbox.pack(fill="y", expand=False, pady=6)
        for name, _ in TASKS:
            self.listbox.insert("end", name)

        ttk.Button(sidebar, text="Otev≈ô√≠t √∫lohu", command=self.open_selected).pack(fill="x", pady=(6, 0))

        # Hlavn√≠ obsah
        self.content = ttk.Frame(self, padding=14)
        self.content.grid(row=0, column=1, sticky="nsew")
        self.content.columnconfigure(0, weight=1)
        self.content.rowconfigure(0, weight=1)

        # Info panel p≈ôi startu
        self.show_welcome()

        # Menu (rychl√Ω v√Ωbƒõr √∫lohy)
        self._build_menu()

    def _build_menu(self):
        menubar = tk.Menu(self)
        self.config(menu=menubar)

        m_tasks = tk.Menu(menubar, tearoff=False)
        for idx, (name, _) in enumerate(TASKS):
            m_tasks.add_command(label=name, command=lambda i=idx: self.open_task(i))
        menubar.add_cascade(label="√ölohy", menu=m_tasks)

        m_help = tk.Menu(menubar, tearoff=False)
        m_help.add_command(label="O aplikaci", command=self.show_about)
        menubar.add_cascade(label="N√°povƒõda", menu=m_help)

    def show_welcome(self):
        clear_frame(self.content)
        box = ttk.Frame(self.content)
        box.grid(row=0, column=0, sticky="nsew")
        box.columnconfigure(0, weight=1)

        ttk.Label(box, text="Procviƒçov√°n√≠ Pythonu s Tkinterem", font=("Segoe UI", 16, "bold")).grid(row=0, column=0, sticky="w")
        ttk.Label(box, text=(
            "Vyber zleva √∫lohu. √ölohy jdou p≈ôibli≈ænƒõ od jednodu≈°≈°√≠ch ke slo≈æitƒõj≈°√≠m a pokr√Ωvaj√≠ funkce, cykly a podm√≠nky.\n"
            "Zkuste si k√≥d upravovat: nap≈ô. p≈ôidat nov√© podm√≠nky, dal≈°√≠ cykly nebo vlastn√≠ vstupy/v√Ωstupy."
        ), wraplength=720).grid(row=1, column=0, sticky="w", pady=(8, 0))

        # Tipy na roz≈°√≠≈ôen√≠ jako checklist
        tips = [
            "[ ] √ö1: P≈ôidej pozdrav podle denn√≠ doby (r√°no/odpoledne/veƒçer).",
            "[ ] √ö2: Porovnej cyklick√Ω souƒçet se vzorcem n*(n+1)/2.",
            "[ ] √ö3: Uprav FizzBuzz tak, aby ≈°la pravidla mƒõnit (nap≈ô. 4‚Üí'Bim').",
            "[ ] √ö4: Zobraz i hlaviƒçky ≈ô√°dk≈Ø a sloupc≈Ø (1..N, 1..M).",
            "[ ] √ö5: Dopl≈à i maximum a aritmetick√Ω pr≈Ømƒõr.",
            "[ ] √ö6: Spoƒç√≠tej poƒçet prvoƒç√≠sel ‚â§ N a pr≈Ømƒõr mezer mezi nimi.",
            "[ ] √ö7: Veden√≠ rekord≈Ø ‚Äì nejmen≈°√≠ poƒçet pokus≈Ø od spu≈°tƒõn√≠.",
            "[ ] √ö8: N√°hodn√© barvy, p≈ôep√≠naƒç pro kruhy/ƒçtverce."
        ]

        ttk.Label(box, text="N√°pady na roz≈°√≠≈ôen√≠:", font=("Segoe UI", 11, "bold")).grid(row=2, column=0, sticky="w", pady=(12, 4))
        txt = tk.Text(box, height=8, width=88)
        txt.grid(row=3, column=0, sticky="nsew")
        txt.insert("end", "\n".join(tips))
        txt.config(state="disabled")

    def show_about(self):
        messagebox.showinfo(
            "O aplikaci",
            "V√Ωukov√° uk√°zka Tkinter ‚Äì funkce, cykly, podm√≠nky.\nAutor: (dopl≈àte)."
        )

    def open_selected(self):
        idx = self.listbox.curselection()
        if not idx:
            messagebox.showwarning("Nic nevybr√°no", "Vyber v seznamu √∫lohu.")
            return
        self.open_task(idx[0])

    def open_task(self, index: int):
        clear_frame(self.content)
        # Ka≈æd√° √∫loha vrac√≠ p≈ôipraven√Ω Frame
        _, builder = TASKS[index]
        task_frame = builder(self.content)
        task_frame.grid(row=0, column=0, sticky="nsew")


if __name__ == "__main__":
    app = App()
    app.mainloop()
